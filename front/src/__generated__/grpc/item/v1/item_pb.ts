// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=.ts"
// @generated from file item/v1/item.proto (package item.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message item.v1.Item
 */
export class Item extends Message<Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int32 price = 3;
   */
  price = 0;

  /**
   * @generated from field: string image_url = 4;
   */
  imageUrl = "";

  constructor(data?: PartialMessage<Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "item.v1.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item {
    return new Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJsonString(jsonString, options);
  }

  static equals(a: Item | PlainMessage<Item> | undefined, b: Item | PlainMessage<Item> | undefined): boolean {
    return proto3.util.equals(Item, a, b);
  }
}

/**
 * @generated from message item.v1.ListItemsRequest
 */
export class ListItemsRequest extends Message<ListItemsRequest> {
  /**
   * @generated from field: optional int32 limit = 1;
   */
  limit?: number;

  constructor(data?: PartialMessage<ListItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "item.v1.ListItemsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListItemsRequest {
    return new ListItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListItemsRequest {
    return new ListItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListItemsRequest {
    return new ListItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListItemsRequest | PlainMessage<ListItemsRequest> | undefined, b: ListItemsRequest | PlainMessage<ListItemsRequest> | undefined): boolean {
    return proto3.util.equals(ListItemsRequest, a, b);
  }
}

/**
 * @generated from message item.v1.ListItemsResponse
 */
export class ListItemsResponse extends Message<ListItemsResponse> {
  /**
   * @generated from field: repeated item.v1.Item items = 1;
   */
  items: Item[] = [];

  constructor(data?: PartialMessage<ListItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "item.v1.ListItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListItemsResponse {
    return new ListItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListItemsResponse {
    return new ListItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListItemsResponse {
    return new ListItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListItemsResponse | PlainMessage<ListItemsResponse> | undefined, b: ListItemsResponse | PlainMessage<ListItemsResponse> | undefined): boolean {
    return proto3.util.equals(ListItemsResponse, a, b);
  }
}

